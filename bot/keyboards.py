from __future__ import annotations

import json
from collections import OrderedDict
from pathlib import Path
from typing import Dict, Sequence

from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes


groups_map = {
    "sport": "‚öΩ –°–ø–æ—Ä—Ç",
    "tourism": "üß≠ –¢—É—Ä–∏–∑–º",
    "medicine": "ü©∫ –ú–µ–¥–∏—Ü–∏–Ω–∞",
    "bioinformatics": "üß¨ –ë–∏–æ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
    "geography": "üó∫Ô∏è –ì–µ–æ–≥—Ä–∞—Ñ–∏—è",
    "psychology": "üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è",
    "beauty": "üíÑ –ò–Ω–¥—É—Å—Ç—Ä–∏—è –∫—Ä–∞—Å–æ—Ç—ã",
}


def build_parse_mode_kb(
    token: str,
    last_sections: list[str] | None = None,
    domain: str | None = None,
) -> InlineKeyboardMarkup:
    """Keyboard offering parse mode selection for a detected URL token."""

    value = (token or "").strip()
    rows = [
        [
            InlineKeyboardButton(
                "üìÑ –¢–æ–ª—å–∫–æ —ç—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data=f"parse|single|{value}"
            ),
            InlineKeyboardButton(
                "üï∏Ô∏è –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–∞–π—Ç", callback_data=f"parse|deep|{value}"
            ),
        ]
    ]
    rows.append(
        [
            InlineKeyboardButton(
                "üï∏Ô∏è –í—ã–±—Ä–∞—Ç—å —Ä–∞–∑–¥–µ–ª—ã‚Ä¶", callback_data=f"parse|sections|{value}"
            )
        ]
    )
    rows.append(
        [
            InlineKeyboardButton(
                "üîé –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–∞–∑–¥–µ–ª—ã", callback_data=f"parse|suggest|{value}"
            )
        ]
    )
    if last_sections:
        human = ", ".join(last_sections[:3])
        if len(last_sections) > 3:
            human += "‚Ä¶"
        domain_label = (domain or "").strip()
        if domain_label:
            domain_label = domain_label.lower()
            label = f"‚ôªÔ∏è –†–∞–∑–¥–µ–ª—ã –¥–ª—è {domain_label}: {human}"
        else:
            label = f"‚ôªÔ∏è –†–∞–∑–¥–µ–ª—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {human}"
        rows.append(
            [
                InlineKeyboardButton(
                    label,
                    callback_data=f"parse|use_last|{value}",
                )
            ]
        )
    return InlineKeyboardMarkup(rows)


def build_post_parse_extra_actions_kb() -> InlineKeyboardMarkup:
    """
    –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø–∞—Ä–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –≤—ã–≤–æ–¥–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º
    —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ –Ω–µ –ª–æ–º–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    """

    return InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç –∞–¥—Ä–µ—Å–æ–≤ –≤ Excel", callback_data="bulk:xls:export")],
            [InlineKeyboardButton("‚úèÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–º", callback_data="bulk:txt:start")],
        ]
    )


def build_sections_suggest_kb(
    token: str, candidates: list[str], selected: set[str] | None
) -> InlineKeyboardMarkup:
    """Build keyboard for interactive section selection."""

    active = selected or set()
    rows: list[list[InlineKeyboardButton]] = []
    for prefix in candidates:
        mark = "‚úÖ" if prefix in active else "‚¨ú"
        rows.append(
            [
                InlineKeyboardButton(
                    f"{mark} {prefix}",
                    callback_data=f"sect|toggle|{token}|{prefix}",
                )
            ]
        )
    rows.append(
        [
            InlineKeyboardButton("‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç", callback_data=f"sect|run|{token}"),
            InlineKeyboardButton("‚úñÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"sect|cancel|{token}"),
        ]
    )
    return InlineKeyboardMarkup(rows)


from services.templates import list_templates

_ICONS: Dict[str, str] = {}
_ICONS_PATH = Path("icons.json")
if _ICONS_PATH.exists():
    try:
        _ICONS = json.loads(_ICONS_PATH.read_text(encoding="utf-8"))
    except Exception:
        _ICONS = {}


def _icon_for(label: str) -> str:
    if not label:
        return ""
    key = label.strip()
    if not key:
        return ""
    icon = _ICONS.get(key)
    if icon:
        return icon
    capitalized = _ICONS.get(key.capitalize())
    if capitalized:
        return capitalized
    lowered = key.casefold()
    for stored_key, stored_icon in _ICONS.items():
        if stored_key.strip().casefold() == lowered:
            return stored_icon
    return ""


def _normalize_code(code: str | None) -> str:
    return (code or "").strip().casefold()


def build_templates_kb(
    context: ContextTypes.DEFAULT_TYPE,
    current_code: str | None = None,
    prefix: str = "tpl:",
    map_name: str = "groups_map",
) -> InlineKeyboardMarkup:
    """Build inline keyboard with templates deduplicated by code."""

    templates = list_templates()
    deduped: "OrderedDict[str, Dict[str, str]]" = OrderedDict()
    for tpl in templates:
        code = str(tpl.get("code") or "").strip()
        key = _normalize_code(code)
        if not key or key in deduped:
            continue
        label = str(tpl.get("label") or code or key).strip()
        path = str(tpl.get("path") or "")
        info: Dict[str, str] = {
            "code": code,
            "label": label,
            "path": path,
        }
        for extra_key, extra_value in tpl.items():
            if extra_key in info:
                continue
            info[extra_key] = extra_value
        deduped[key] = info

    normalized_current = _normalize_code(current_code)
    rows = []
    mapping: Dict[str, Dict[str, str]] = {}
    label_rows: Dict[str, int] = {}
    for key, info in deduped.items():
        mapping[key] = dict(info)
        base_label = str(info.get("label") or info.get("code") or key)
        display_label = base_label
        # –ü—Ä–µ—Ñ–∏–∫—Å—É–µ–º –∏–∫–æ–Ω–∫–æ–π, –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–¥–∞–Ω–∞ –≤ icons.json
        icon = _icon_for(base_label)
        if icon:
            display_label = f"{icon} {display_label}"
        if normalized_current and key == normalized_current:
            display_label = f"{display_label} ‚Ä¢ —Ç–µ–∫—É—â–∏–π"
        existing_idx = label_rows.get(base_label)
        button = InlineKeyboardButton(
            str(display_label), callback_data=f"{prefix}{key}"
        )
        if existing_idx is None:
            rows.append([button])
            label_rows[base_label] = len(rows) - 1
        else:
            if normalized_current and key == normalized_current:
                rows[existing_idx] = [button]

    if context is not None:
        storage = context.user_data.setdefault(map_name, {})
        storage[prefix] = mapping

    return InlineKeyboardMarkup(rows)


def send_flow_keyboard() -> InlineKeyboardMarkup:
    """Inline keyboard shown before starting bulk send."""

    return InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="bulk:send:start")],
            [
                InlineKeyboardButton(
                    "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è / –ü—Ä–∞–≤–∏—Ç—å", callback_data="bulk:send:back"
                )
            ],
            [
                InlineKeyboardButton(
                    "‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å", callback_data="bulk:send:edit"
                )
            ],
        ]
    )


def build_bulk_edit_kb(
    emails: Sequence[str], page: int = 0, page_size: int = 10
) -> InlineKeyboardMarkup:
    """Keyboard for bulk address editing actions."""

    total = len(emails)
    if page_size <= 0:
        page_size = 10
    max_page = max((total - 1) // page_size, 0) if total else 0
    page = max(0, min(page, max_page))
    start = page * page_size
    end = start + page_size
    visible = emails[start:end]

    rows: list[list[InlineKeyboardButton]] = [
        [
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="bulk:edit:add"),
            InlineKeyboardButton("üîÅ –ó–∞–º–µ–Ω–∏—Ç—å", callback_data="bulk:edit:replace"),
        ]
    ]

    for email in visible:
        rows.append(
            [
                InlineKeyboardButton(
                    f"üóë {email}", callback_data=f"bulk:edit:del:{email}"
                )
            ]
        )

    nav: list[InlineKeyboardButton] = []
    if page > 0:
        nav.append(
            InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"bulk:edit:page:{page - 1}")
        )
    if end < total:
        nav.append(
            InlineKeyboardButton("‚û°Ô∏è", callback_data=f"bulk:edit:page:{page + 1}")
        )
    if nav:
        rows.append(nav)

    rows.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="bulk:edit:done")])
    return InlineKeyboardMarkup(rows)
