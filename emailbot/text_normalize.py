import re


EMAIL_TOKEN = r"[A-Za-z0-9._%+\-]+@[A-Za-z0-9.\-]+\.[A-Za-z]{2,}"


def normalize_text_for_emails(text: str) -> str:
    """Мягкая нормализация текста перед поиском e-mail адресов.

    Шаги:
    * Снимаем переносы по дефису внутри слов.
    * Превращаем остальные переводы строк в пробелы.
    * Разлепляем токены вида «словоemail@domain» добавлением пробела слева.
    * Схлопываем множественные пробелы.
    Адреса e-mail при этом не модифицируются.
    """

    if not text:
        return text

    # 1) Убрать переносы с дефисом в середине слов.
    text = re.sub(r"(\w)-\s*\n\s*(\w)", r"\1\2", text, flags=re.UNICODE)

    # Остальные переносы превращаем в пробелы.
    text = re.sub(r"\s*\n\s*", " ", text)

    # 2) Вставить пробел перед e-mail, если слева слово-символ вне ASCII-набора local-part.
    text = re.sub(
        r"(?:(?<=\w)(?<![A-Za-z0-9._%+\-]))(" + EMAIL_TOKEN + r")",
        r" \1",
        text,
        flags=re.UNICODE,
    )

    # 3) Сжать множественные пробелы.
    text = re.sub(r"[ \t]{2,}", " ", text)

    return text
