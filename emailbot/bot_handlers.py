"""Telegram bot handlers."""

from __future__ import annotations

import os
import time
import re
import csv
import asyncio
from datetime import datetime, timedelta
from typing import Set, List, Optional

from dataclasses import dataclass, field

import aiohttp
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import ContextTypes, filters

from .extraction import (
    normalize_email,
    extract_clean_emails_from_text,
    extract_emails_loose,
    extract_from_uploaded_file,
    extract_emails_from_zip,
    apply_numeric_truncation_removal,
    is_allowed_tld,
    is_numeric_localpart,
    collapse_footnote_variants,
    find_prefix_repairs,
    collect_repairs_from_files,
    sample_preview,
    async_extract_emails_from_url,
)
from .messaging import (
    DOWNLOAD_DIR,
    LOG_FILE,
    MAX_EMAILS_PER_DAY,
    TEMPLATE_MAP,
    async_send_email,
    add_blocked_email,
    dedupe_blocked_file,
    get_blocked_emails,
    log_sent_email,
    get_sent_today,
    get_recent_6m_union,
    clear_recent_sent_cache,
    sync_log_with_imap,
)
from .utils import log_error


PREVIEW_ALLOWED = 10
PREVIEW_NUMERIC = 6
PREVIEW_FOREIGN = 6

TECH_PATTERNS = [
    "noreply",
    "no-reply",
    "do-not-reply",
    "donotreply",
    "postmaster",
    "mailer-daemon",
    "abuse",
    "support",
    "admin",
    "info@",
]

@dataclass
class SessionState:
    all_emails: Set[str] = field(default_factory=set)
    all_files: List[str] = field(default_factory=list)
    to_send: List[str] = field(default_factory=list)
    suspect_numeric: List[str] = field(default_factory=list)
    foreign: List[str] = field(default_factory=list)
    preview_allowed_all: List[str] = field(default_factory=list)
    repairs: List[tuple[str, str]] = field(default_factory=list)
    repairs_sample: List[str] = field(default_factory=list)
    group: Optional[str] = None
    template: Optional[str] = None
    manual_emails: List[str] = field(default_factory=list)


FORCE_SEND_CHAT_IDS: set[int] = set()
session_data: dict[int, SessionState] = {}


def enable_force_send(chat_id: int) -> None:
    FORCE_SEND_CHAT_IDS.add(chat_id)


def disable_force_send(chat_id: int) -> None:
    FORCE_SEND_CHAT_IDS.discard(chat_id)


def is_force_send(chat_id: int) -> bool:
    return chat_id in FORCE_SEND_CHAT_IDS


def clear_all_awaiting(context: ContextTypes.DEFAULT_TYPE):
    for key in ["awaiting_block_email", "awaiting_manual_email"]:
        context.user_data[key] = False


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤", "üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫"],
        ["üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏—è", "üö´ –î–æ–±–∞–≤–∏—Ç—å –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è"],
        ["‚úâÔ∏è –†—É—á–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", "üßæ –û –±–æ—Ç–µ"],
        ["üß≠ –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", "üìà –û—Ç—á—ë—Ç—ã"],
        ["üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–æ–º", "üöÄ –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ª–∏–º–∏—Ç"],
    ]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", reply_markup=markup)


async def prompt_upload(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üì• –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å e-mail-–∞–¥—Ä–µ—Å–∞–º–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PDF, Excel (.xlsx), Word (.docx), CSV, ZIP (—Å —ç—Ç–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏ –≤–Ω—É—Ç—Ä–∏), –∞ —Ç–∞–∫–∂–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∞–π—Ç—ã."
    )


async def about_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ë–æ—Ç –¥–µ–ª–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É HTML-–ø–∏—Å–µ–º —Å —É—á—ë—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ (IMAP 180 –¥–Ω–µ–π) –∏ –±–ª–æ–∫-–ª–∏—Å—Ç–∞. "
        "–û–¥–∏–Ω –∞–¥—Ä–µ—Å ‚Äî –Ω–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ 6 –º–µ—Å—è—Ü–µ–≤. –î–æ–º–µ–Ω—ã: —Ç–æ–ª—å–∫–æ .ru –∏ .com."
    )


async def add_block_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    clear_all_awaiting(context)
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ email –∏–ª–∏ —Å–ø–∏—Å–æ–∫ email-–∞–¥—Ä–µ—Å–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é/–ø—Ä–æ–±–µ–ª/—Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏), –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è:"
    )
    context.user_data["awaiting_block_email"] = True


async def show_blocked_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dedupe_blocked_file()
    blocked = get_blocked_emails()
    if not blocked:
        await update.message.reply_text("üìÑ –°–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø—É—Å—Ç.")
    else:
        await update.message.reply_text(
            "üìÑ –í –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö:\n" + "\n".join(sorted(blocked))
        )


async def prompt_change_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("‚öΩ –°–ø–æ—Ä—Ç", callback_data="group_—Å–ø–æ—Ä—Ç")],
        [InlineKeyboardButton("üèï –¢—É—Ä–∏–∑–º", callback_data="group_—Ç—É—Ä–∏–∑–º")],
        [InlineKeyboardButton("ü©∫ –ú–µ–¥–∏—Ü–∏–Ω–∞", callback_data="group_–º–µ–¥–∏—Ü–∏–Ω–∞")],
    ]
    await update.message.reply_text(
        "‚¨áÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )


async def force_send_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    enable_force_send(chat_id)
    await update.message.reply_text(
        "–†–µ–∂–∏–º –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –≤–∫–ª—é—á—ë–Ω –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞.\n"
        "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É –µ—â—ë —Ä–∞–∑ ‚Äî –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ."
    )


async def report_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìÜ –î–µ–Ω—å", callback_data="report_day")],
        [InlineKeyboardButton("üóì –ù–µ–¥–µ–ª—è", callback_data="report_week")],
        [InlineKeyboardButton("üóì –ú–µ—Å—è—Ü", callback_data="report_month")],
        [InlineKeyboardButton("üìÖ –ì–æ–¥", callback_data="report_year")],
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –æ—Ç—á—ë—Ç–∞:", reply_markup=InlineKeyboardMarkup(keyboard)
    )


def get_report(period="day"):
    if not os.path.exists(LOG_FILE):
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Å—ã–ª–∫–∞—Ö."
    now = datetime.now()
    if period == "day":
        start_at = now - timedelta(days=1)
    elif period == "week":
        start_at = now - timedelta(weeks=1)
    elif period == "month":
        start_at = now - timedelta(days=30)
    elif period == "year":
        start_at = now - timedelta(days=365)
    else:
        start_at = now - timedelta(days=1)

    cnt_ok = 0
    cnt_err = 0
    with open(LOG_FILE, encoding="utf-8") as f:
        reader = csv.reader(f)
        for row in reader:
            if len(row) < 4:
                continue
            try:
                dt = datetime.fromisoformat(row[0])
                if dt.tzinfo is not None:
                    dt = dt.replace(tzinfo=None)
            except Exception:
                continue
            if dt >= start_at:
                st = (row[3] or "").strip().lower()
                if st == "ok":
                    cnt_ok += 1
                else:
                    cnt_err += 1
    return f"–£—Å–ø–µ—à–Ω—ã—Ö: {cnt_ok}\n–û—à–∏–±–æ–∫: {cnt_err}"


async def report_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    period = query.data.replace("report_", "")
    mapping = {
        "day": "–û—Ç—á—ë—Ç –∑–∞ –¥–µ–Ω—å",
        "week": "–û—Ç—á—ë—Ç –∑–∞ –Ω–µ–¥–µ–ª—é",
        "month": "–û—Ç—á—ë—Ç –∑–∞ –º–µ—Å—è—Ü",
        "year": "–û—Ç—á—ë—Ç –∑–∞ –≥–æ–¥",
    }
    text = get_report(period)
    await query.edit_message_text(f"üìä {mapping.get(period, period)}:\n{text}")


async def sync_imap_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚è≥ –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫—É ¬´–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ¬ª (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 180 –¥–Ω–µ–π)..."
    )
    try:
        added = sync_log_with_imap()
        clear_recent_sent_cache()
        await update.message.reply_text(f"üîÑ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ª–æ–≥ {added} –Ω–æ–≤—ã—Ö –∞–¥—Ä–µ—Å–æ–≤.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")


async def reset_email_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    state = session_data.setdefault(chat_id, SessionState())
    state.all_emails.clear()
    state.all_files.clear()
    state.to_send.clear()
    state.suspect_numeric.clear()
    state.foreign.clear()
    state.preview_allowed_all.clear()
    state.repairs.clear()
    state.repairs_sample.clear()
    await update.message.reply_text(
        "–°–ø–∏—Å–æ–∫ email-–∞–¥—Ä–µ—Å–æ–≤ –∏ —Ñ–∞–π–ª–æ–≤ –æ—á–∏—â–µ–Ω. –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã!"
    )


async def _compose_report_and_save(
    chat_id: int,
    allowed_all: Set[str],
    filtered: List[str],
    suspicious_numeric: List[str],
    foreign: List[str],
) -> str:
    state = session_data.setdefault(chat_id, SessionState())
    state.preview_allowed_all = sorted(allowed_all)
    state.suspect_numeric = suspicious_numeric
    state.foreign = sorted(foreign)

    sample_allowed = sample_preview(state.preview_allowed_all, PREVIEW_ALLOWED)
    sample_numeric = sample_preview(suspicious_numeric, PREVIEW_NUMERIC)
    sample_foreign = sample_preview(state.foreign, PREVIEW_FOREIGN)

    report = (
        "‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω.\n"
        f"–ù–∞–π–¥–µ–Ω–æ –∞–¥—Ä–µ—Å–æ–≤ (.ru/.com): {len(allowed_all)}\n"
        f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö (–ø–æ—Å–ª–µ –±–∞–∑–æ–≤–æ–π –æ—á–∏—Å—Ç–∫–∏): {len(filtered)}\n"
        f"–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ (–ª–æ–≥–∏–Ω —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä, –∏—Å–∫–ª—é—á–µ–Ω—ã): {len(suspicious_numeric)}\n"
        f"–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã (–∏—Å–∫–ª—é—á–µ–Ω—ã): {len(foreign)}"
    )
    if sample_allowed:
        report += "\n\nüß™ –ü—Ä–∏–º–µ—Ä—ã (.ru/.com):\n" + "\n".join(sample_allowed)
    if sample_numeric:
        report += "\n\nüî¢ –ü—Ä–∏–º–µ—Ä—ã —Ü–∏—Ñ—Ä–æ–≤—ã—Ö (–∏—Å–∫–ª—é—á–µ–Ω—ã):\n" + "\n".join(sample_numeric)
    if sample_foreign:
        report += "\n\nüåç –ü—Ä–∏–º–µ—Ä—ã –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö (–∏—Å–∫–ª—é—á–µ–Ω—ã):\n" + "\n".join(sample_foreign)
    return report


async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    doc = update.message.document
    if not doc:
        return
    chat_id = update.effective_chat.id
    os.makedirs(DOWNLOAD_DIR, exist_ok=True)
    file_path = os.path.join(
        DOWNLOAD_DIR, f"{chat_id}_{int(time.time())}_{doc.file_name}"
    )
    f = await doc.get_file()
    await f.download_to_drive(file_path)

    await update.message.reply_text("–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω. –ò–¥—ë—Ç –∞–Ω–∞–ª–∏–∑...")
    progress_msg = await update.message.reply_text("üîé –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...")

    allowed_all, loose_all = set(), set()
    extracted_files: List[str] = []
    repairs: List[tuple[str, str]] = []

    try:
        if file_path.lower().endswith(".zip"):
            allowed_all, extracted_files, loose_all = await extract_emails_from_zip(
                file_path, progress_msg, DOWNLOAD_DIR
            )
            repairs = collect_repairs_from_files(extracted_files)
        else:
            allowed, loose = extract_from_uploaded_file(file_path)
            allowed_all.update(allowed)
            loose_all.update(loose)
            extracted_files.append(file_path)
            repairs = collect_repairs_from_files([file_path])
    except Exception as e:
        log_error(f"handle_document: {file_path}: {e}")

    allowed_all, trunc_pairs = apply_numeric_truncation_removal(allowed_all)
    repairs = list(dict.fromkeys(repairs + trunc_pairs))

    technical_emails = [e for e in allowed_all if any(tp in e for tp in TECH_PATTERNS)]
    filtered = [e for e in allowed_all if e not in technical_emails and is_allowed_tld(e)]

    suspicious_numeric = sorted({e for e in filtered if is_numeric_localpart(e)})
    filtered = [e for e in filtered if not is_numeric_localpart(e)]

    foreign_raw = {e for e in loose_all if not is_allowed_tld(e)}
    foreign = sorted(collapse_footnote_variants(foreign_raw))

    state = session_data.setdefault(chat_id, SessionState())
    state.all_emails = set(filtered)
    state.all_files = extracted_files
    state.to_send = sorted(set(filtered))
    state.repairs = repairs
    state.repairs_sample = sample_preview(
        [f"{b} ‚Üí {g}" for (b, g) in repairs], 6
    )

    report = await _compose_report_and_save(
        chat_id, allowed_all, filtered, suspicious_numeric, foreign
    )
    if state.repairs_sample:
        report += "\n\nüß© –í–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ä—É—á–Ω—É—é):"
        for s in state.repairs_sample:
            report += f"\n{s}"
    await update.message.reply_text(report)

    extra_buttons = [
        [InlineKeyboardButton("üîÅ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë –ø—Ä–∏–º–µ—Ä—ã", callback_data="refresh_preview")]
    ]
    if suspicious_numeric:
        extra_buttons.append(
            [
                InlineKeyboardButton(
                    f"‚ûï –í–∫–ª—é—á–∏—Ç—å —Ü–∏—Ñ—Ä–æ–≤—ã–µ ({len(suspicious_numeric)})",
                    callback_data="ask_include_numeric",
                )
            ]
        )
        extra_buttons.append(
            [InlineKeyboardButton("üî¢ –ü–æ–∫–∞–∑–∞—Ç—å —Ü–∏—Ñ—Ä–æ–≤—ã–µ", callback_data="show_numeric")]
        )
    if state.foreign:
        extra_buttons.append(
            [
                InlineKeyboardButton(
                    f"üåç –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ ({len(state.foreign)})",
                    callback_data="show_foreign",
                )
            ]
        )
    if state.repairs:
        extra_buttons.append(
            [
                InlineKeyboardButton(
                    f"üß© –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è ({len(state.repairs)})",
                    callback_data="apply_repairs",
                )
            ]
        )
        extra_buttons.append(
            [InlineKeyboardButton("üß© –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è", callback_data="show_repairs")]
        )
    extra_buttons.append(
        [InlineKeyboardButton("‚ñ∂Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è", callback_data="proceed_group")]
    )

    await update.message.reply_text(
        "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:",
        reply_markup=InlineKeyboardMarkup(extra_buttons),
    )


async def refresh_preview(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = query.message.chat.id
    state = session_data.get(chat_id)
    allowed_all = state.preview_allowed_all if state else []
    numeric = state.suspect_numeric if state else []
    foreign = state.foreign if state else []
    if not (allowed_all or numeric or foreign):
        await query.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª/—Å—Å—ã–ª–∫–∏.", show_alert=True)
        return
    await query.answer()
    sample_allowed = sample_preview(allowed_all, PREVIEW_ALLOWED)
    sample_numeric = sample_preview(numeric, PREVIEW_NUMERIC)
    sample_foreign = sample_preview(foreign, PREVIEW_FOREIGN)
    report = []
    if sample_allowed:
        report.append("üß™ –ü—Ä–∏–º–µ—Ä—ã (.ru/.com):\n" + "\n".join(sample_allowed))
    if sample_numeric:
        report.append("üî¢ –ü—Ä–∏–º–µ—Ä—ã —Ü–∏—Ñ—Ä–æ–≤—ã—Ö (–∏—Å–∫–ª—é—á–µ–Ω—ã):\n" + "\n".join(sample_numeric))
    if sample_foreign:
        report.append("üåç –ü—Ä–∏–º–µ—Ä—ã –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö (–∏—Å–∫–ª—é—á–µ–Ω—ã):\n" + "\n".join(sample_foreign))
    await query.message.reply_text("\n\n".join(report) if report else "–ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ—á–µ–≥–æ.")


async def proceed_to_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("‚öΩ –°–ø–æ—Ä—Ç", callback_data="group_—Å–ø–æ—Ä—Ç")],
        [InlineKeyboardButton("üèï –¢—É—Ä–∏–∑–º", callback_data="group_—Ç—É—Ä–∏–∑–º")],
        [InlineKeyboardButton("ü©∫ –ú–µ–¥–∏—Ü–∏–Ω–∞", callback_data="group_–º–µ–¥–∏—Ü–∏–Ω–∞")],
    ]
    await query.message.reply_text(
        "‚¨áÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )


async def select_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    group_code = query.data.split("_")[1]
    template_path = TEMPLATE_MAP[group_code]
    chat_id = query.message.chat.id
    state = session_data.setdefault(chat_id, SessionState())
    emails = state.to_send
    state.group = group_code
    state.template = template_path
    await query.message.reply_text(
        f"‚úâÔ∏è –ì–æ—Ç–æ–≤–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ {len(emails)} –ø–∏—Å–µ–º.\n"
        f"–î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚úâÔ∏è –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="start_sending")]]
        ),
    )


async def prompt_manual_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    clear_all_awaiting(context)
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ email –∏–ª–∏ —Å–ø–∏—Å–æ–∫ email-–∞–¥—Ä–µ—Å–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é/–ø—Ä–æ–±–µ–ª/—Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):"
    )
    context.user_data["awaiting_manual_email"] = True


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    text = update.message.text or ""
    if context.user_data.get("awaiting_block_email"):
        emails = {
            normalize_email(x)
            for x in extract_emails_loose(text)
            if "@" in x
        }
        added = [e for e in emails if add_blocked_email(e)]
        await update.message.reply_text(
            f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {len(added)}" if added else "–ù–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ."
        )
        context.user_data["awaiting_block_email"] = False
        return
    if context.user_data.get("awaiting_manual_email"):
        state = session_data.setdefault(chat_id, SessionState())
        state.manual_emails.append(text)
        await update.message.reply_text(
            "–î–æ–±–∞–≤–ª–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´‚úâÔ∏è –†—É—á–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞¬ª."
        )
        return

    urls = re.findall(r"https?://\S+", text)
    if urls:
        await update.message.reply_text("üåê –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
        results = []
        async with aiohttp.ClientSession() as session:
            tasks = [async_extract_emails_from_url(url, session, chat_id) for url in urls]
            results = await asyncio.gather(*tasks)
        allowed_all: Set[str] = set()
        foreign_all: Set[str] = set()
        repairs_all: List[tuple[str, str]] = []
        for _, allowed, foreign, repairs in results:
            allowed_all.update(allowed)
            foreign_all.update(foreign)
            repairs_all.extend(repairs)
        state = session_data.setdefault(chat_id, SessionState())
        state.to_send.extend(sorted(allowed_all))
        state.foreign = sorted(foreign_all)
        state.repairs = list(dict.fromkeys(state.repairs + repairs_all))
        await update.message.reply_text(
            f"–î–æ–±–∞–≤–ª–µ–Ω–æ –∞–¥—Ä–µ—Å–æ–≤: {len(allowed_all)}. –ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤: {len(foreign_all)}"
        )
        return


async def ask_include_numeric(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = query.message.chat.id
    state = session_data.setdefault(chat_id, SessionState())
    numeric = state.suspect_numeric
    if not numeric:
        await query.answer("–¶–∏—Ñ—Ä–æ–≤—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –Ω–µ—Ç", show_alert=True)
        return
    await query.answer()
    preview_list = numeric[:60]
    txt = (
        f"–ù–∞–π–¥–µ–Ω–æ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –ª–æ–≥–∏–Ω–æ–≤: {len(numeric)}.\n–ë—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤—Å–µ.\n\n–ü—Ä–∏–º–µ—Ä:\n"
        + "\n".join(preview_list)
    )
    more = len(numeric) - len(preview_list)
    if more > 0:
        txt += f"\n‚Ä¶ –∏ –µ—â—ë {more}."
    await query.message.reply_text(
        txt,
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "‚úÖ –í–∫–ª—é—á–∏—Ç—å –≤—Å–µ —Ü–∏—Ñ—Ä–æ–≤—ã–µ",
                        callback_data="confirm_include_numeric",
                    )
                ],
                [InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel_include_numeric")],
            ]
        ),
    )


async def include_numeric_emails(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = query.message.chat.id
    state = session_data.setdefault(chat_id, SessionState())
    numeric = state.suspect_numeric
    if not numeric:
        await query.answer("–¶–∏—Ñ—Ä–æ–≤—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –Ω–µ—Ç", show_alert=True)
        return
    current = set(state.to_send)
    added = [e for e in numeric if e not in current]
    current.update(numeric)
    state.to_send = sorted(current)
    await query.answer()
    await query.message.reply_text(
        f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∞–¥—Ä–µ—Å–æ–≤: {len(added)}.\n–ò—Ç–æ–≥–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ: {len(state.to_send)}."
    )


async def cancel_include_numeric(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("–û–∫, —Ü–∏—Ñ—Ä–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–º–∏.")


async def show_numeric_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = query.message.chat.id
    state = session_data.get(chat_id)
    numeric = state.suspect_numeric if state else []
    if not numeric:
        await query.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç", show_alert=True)
        return
    await query.answer()
    for chunk in _chunk_list(numeric, 60):
        await query.message.reply_text("üî¢ –¶–∏—Ñ—Ä–æ–≤—ã–µ –ª–æ–≥–∏–Ω—ã:\n" + "\n".join(chunk))


async def show_foreign_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = query.message.chat.id
    state = session_data.get(chat_id)
    foreign = state.foreign if state else []
    if not foreign:
        await query.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç", show_alert=True)
        return
    await query.answer()
    for chunk in _chunk_list(foreign, 60):
        await query.message.reply_text(
            "üåç –ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã (–∏—Å–∫–ª—é—á–µ–Ω—ã):\n" + "\n".join(chunk)
        )


async def apply_repairs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = query.message.chat.id
    state = session_data.setdefault(chat_id, SessionState())
    repairs: List[tuple[str, str]] = state.repairs
    if not repairs:
        await query.answer("–ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", show_alert=True)
        return
    current = set(state.to_send)
    applied = 0
    changed = []
    for bad, good in repairs:
        if bad in current:
            current.discard(bad)
            if is_allowed_tld(good):
                current.add(good)
                applied += 1
                if applied <= 12:
                    changed.append(f"{bad} ‚Üí {good}")
    state.to_send = sorted(current)
    await query.answer()
    txt = f"üß© –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {applied}."
    if changed:
        txt += "\n" + "\n".join(changed)
        if applied > len(changed):
            txt += f"\n‚Ä¶ –∏ –µ—â—ë {applied - len(changed)}."
    await query.message.reply_text(txt)


async def show_repairs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = query.message.chat.id
    state = session_data.get(chat_id)
    repairs: List[tuple[str, str]] = state.repairs if state else []
    if not repairs:
        await query.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç", show_alert=True)
        return
    await query.answer()
    pairs = [f"{b} ‚Üí {g}" for (b, g) in repairs]
    for chunk in _chunk_list(pairs, 60):
        await query.message.reply_text(
            "üß© –í–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n" + "\n".join(chunk)
        )


async def send_manual_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = query.message.chat.id
    group_code = query.data.split("_")[2]
    template_path = TEMPLATE_MAP[group_code]

    state = session_data.setdefault(chat_id, SessionState())
    emails_raw = state.manual_emails
    all_text = " ".join(emails_raw)
    emails = sorted({normalize_email(x) for x in extract_clean_emails_from_text(all_text)})
    if not emails:
        await query.message.reply_text("‚ùó –°–ø–∏—Å–æ–∫ email –ø—É—Å—Ç.")
        return

    loop = asyncio.get_running_loop()
    recent_sent = await loop.run_in_executor(None, get_recent_6m_union)
    blocked = get_blocked_emails()
    sent_today = get_sent_today()

    to_send = [
        e for e in emails if e not in recent_sent and e not in sent_today and e not in blocked
    ]
    if not to_send:
        await query.message.reply_text(
            "‚ùó –í—Å–µ –∞–¥—Ä–µ—Å–∞ —É–∂–µ –µ—Å—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞ 6 –º–µ—Å. –∏–ª–∏ –≤ –±–ª–æ–∫-–ª–∏—Å—Ç–µ."
        )
        state.manual_emails = []
        return

    available = max(0, MAX_EMAILS_PER_DAY - len(sent_today))
    if available <= 0 and not is_force_send(chat_id):
        await update.callback_query.message.reply_text(
            f"‚ùó –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç {MAX_EMAILS_PER_DAY} —É–∂–µ –∏—Å—á–µ—Ä–ø–∞–Ω.\n"
            "–ï—Å–ª–∏ –≤—ã –∏—Å–ø—Ä–∞–≤–∏–ª–∏ –æ—à–∏–±–∫–∏ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´üöÄ –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ª–∏–º–∏—Ç¬ª –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –µ—â—ë —Ä–∞–∑."
        )
        return
    if not is_force_send(chat_id) and len(to_send) > available:
        to_send = to_send[:available]
        await query.message.reply_text(
            f"‚ö†Ô∏è –£—á–∏—Ç—ã–≤–∞—é –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {available} –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞."
        )

    await query.message.reply_text(
        f"‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(to_send)} –ø–∏—Å–µ–º..."
    )

    sent_count = 0
    errors = []
    for email_addr in to_send:
        try:
            await async_send_email(email_addr, template_path)
            log_sent_email(email_addr, group_code, "ok", chat_id, template_path)
            sent_count += 1
            await asyncio.sleep(1.5)
        except Exception as e:
            errors.append(f"{email_addr} ‚Äî {e}")
            err = str(e).lower()
            if (
                "invalid mailbox" in err
                or "user is terminated" in err
                or "non-local recipient verification failed" in err
            ):
                add_blocked_email(email_addr)
            log_sent_email(
                email_addr, group_code, "error", chat_id, template_path, str(e)
            )

    await query.message.reply_text(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∏—Å–µ–º: {sent_count}")
    if errors:
        await query.message.reply_text("–û—à–∏–±–∫–∏:\n" + "\n".join(errors))

    state.manual_emails = []
    clear_recent_sent_cache()
    disable_force_send(chat_id)


async def send_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = query.message.chat.id
    state = session_data.setdefault(chat_id, SessionState())
    emails = state.to_send
    group_code = state.group
    template_path = state.template
    if not emails or not group_code or not template_path:
        await query.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏", show_alert=True)
        return

    loop = asyncio.get_running_loop()
    recent_sent = await loop.run_in_executor(None, get_recent_6m_union)
    blocked = get_blocked_emails()
    sent_today = get_sent_today()

    emails_to_send = [
        e for e in emails if e not in recent_sent and e not in sent_today and e not in blocked
    ]
    if not emails_to_send:
        await query.message.reply_text(
            "‚ùó –í—Å–µ –∞–¥—Ä–µ—Å–∞ —É–∂–µ –µ—Å—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞ 6 –º–µ—Å. –∏–ª–∏ –≤ –±–ª–æ–∫-–ª–∏—Å—Ç–µ."
        )
        return

    available = max(0, MAX_EMAILS_PER_DAY - len(sent_today))
    if available <= 0 and not is_force_send(chat_id):
        await query.message.reply_text(
            f"‚ùó –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç {MAX_EMAILS_PER_DAY} —É–∂–µ –∏—Å—á–µ—Ä–ø–∞–Ω.\n"
            "–ï—Å–ª–∏ –≤—ã –∏—Å–ø—Ä–∞–≤–∏–ª–∏ –æ—à–∏–±–∫–∏ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´üöÄ –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ª–∏–º–∏—Ç¬ª –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –µ—â—ë —Ä–∞–∑."
        )
        return
    if not is_force_send(chat_id) and len(emails_to_send) > available:
        emails_to_send = emails_to_send[:available]
        await query.message.reply_text(
            f"‚ö†Ô∏è –£—á–∏—Ç—ã–≤–∞—é –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {available} –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞."
        )

    await query.message.reply_text(
        f"‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(emails_to_send)} –ø–∏—Å–µ–º..."
    )

    sent_count = 0
    bad_emails = []
    for email_addr in emails_to_send:
        try:
            await async_send_email(email_addr, template_path)
            log_sent_email(email_addr, group_code, "ok", chat_id, template_path)
            sent_count += 1
            await asyncio.sleep(1.5)
        except Exception as e:
            error_text = str(e).lower()
            if (
                "invalid mailbox" in error_text
                or "user is terminated" in error_text
                or "non-local recipient verification failed" in error_text
            ):
                add_blocked_email(email_addr)
                bad_emails.append(email_addr)
            log_sent_email(
                email_addr, group_code, "error", chat_id, template_path, str(e)
            )

    await query.message.reply_text(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∏—Å–µ–º: {sent_count}")
    if bad_emails:
        await query.message.reply_text(
            "üö´ –í –±–ª–æ–∫-–ª–∏—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã:\n" + "\n".join(bad_emails)
        )

    clear_recent_sent_cache()
    disable_force_send(chat_id)


async def autosync_imap_with_message(query):
    await query.message.reply_text(
        "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º..."
    )
    loop = asyncio.get_running_loop()
    added = await loop.run_in_executor(None, sync_log_with_imap)
    clear_recent_sent_cache()
    await query.message.reply_text(
        f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í –ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö –∞–¥—Ä–µ—Å–æ–≤: {added}.\n"
        f"–ò—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤."
    )


def _chunk_list(items: List[str], size=60) -> List[List[str]]:
    return [items[i : i + size] for i in range(0, len(items), size)]


__all__ = [
    "start",
    "prompt_upload",
    "about_bot",
    "add_block_prompt",
    "show_blocked_list",
    "prompt_change_group",
    "force_send_command",
    "report_command",
    "report_callback",
    "sync_imap_command",
    "reset_email_list",
    "handle_document",
    "refresh_preview",
    "proceed_to_group",
    "select_group",
    "prompt_manual_email",
    "handle_text",
    "ask_include_numeric",
    "include_numeric_emails",
    "cancel_include_numeric",
    "show_numeric_list",
    "show_foreign_list",
    "apply_repairs",
    "show_repairs",
    "send_manual_email",
    "send_all",
    "autosync_imap_with_message",
]

