"""PTB-–≤—Ö–æ–¥: –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ç–∞—Ä—Ç, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –Ω–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å –≤ —Å—Ç–∏–ª–µ ¬´–∑–æ–ª–æ—Ç–æ–≥–æ¬ª UI."""
from __future__ import annotations
import os
from pathlib import Path

from dotenv import load_dotenv
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    Update,
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)


def _load_env() -> None:
    root = Path(__file__).resolve().parents[2]
    env = root / ".env"
    load_dotenv(dotenv_path=env if env.exists() else None)


def _read_file(path: str) -> str | None:
    if not path:
        return None
    file_path = Path(path)
    if not file_path.exists():
        return None
    try:
        return file_path.read_text(encoding="utf-8")
    except Exception:
        return None


def _load_start_text() -> str:
    # –ö–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è /start, –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç .env
    return "<b>–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ</b>"


def _load_bulk_text() -> str:
    # –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ ¬´–ú–∞—Å—Å–æ–≤–∞—è¬ª
    text = _read_file((os.getenv("BULK_MESSAGE_HTML_PATH") or "").strip())
    if text:
        return text
    env_value = (os.getenv("BULK_MESSAGE_TEXT") or "").strip()
    if env_value:
        return env_value
    return (
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–æ e-mail-–∞–¥—Ä–µ—Å–∞–º–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PDF, Excel (xlsx), Word (docx), CSV, "
        "ZIP (—Å —ç—Ç–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏ –≤–Ω—É—Ç—Ä–∏), –∞ —Ç–∞–∫–∂–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∞–π—Ç—ã.\n\n"
        "<i>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</i>\n"
        "–ú—ã —É–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–Ω–æ—Å–∫–∏/–æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥—Ä–µ—Å–∞ (MX/–¥—É–±–ª–∏–∫–∞—Ç—ã).\n"
        "–ü—Ä–∞–≤–∏–ª–æ: –æ–¥–∏–Ω –∞–¥—Ä–µ—Å ‚Äî –Ω–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ 180 –¥–Ω–µ–π."
    )


_ALLOWED_TAGS = "b|strong|i|em|u|ins|s|strike|del|a|code|pre|tg-spoiler"


def _normalize_html(text: str) -> str:
    import re

    if not text:
        return text
    text = re.sub(r"<br\s*/?>", "\n", text, flags=re.IGNORECASE)
    text = re.sub(
        rf"</?(?!{_ALLOWED_TAGS})([a-z0-9:-]+)(?:\s[^>]*)?>",
        "",
        text,
        flags=re.IGNORECASE,
    )
    return text


def _categories_inline_keyboard() -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton("üß¨ –ë–∏–æ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", callback_data="cat:bio")],
        [InlineKeyboardButton("üó∫Ô∏è –ì–µ–æ–≥—Ä–∞—Ñ–∏—è", callback_data="cat:geo")],
        [InlineKeyboardButton("üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è", callback_data="cat:psy")],
        [InlineKeyboardButton("üèÉ –°–ø–æ—Ä—Ç", callback_data="cat:sport")],
        [InlineKeyboardButton("üß≥ –¢—É—Ä–∏–∑–º", callback_data="cat:tour")],
    ]
    return InlineKeyboardMarkup(rows)


def _bottom_reply_keyboard() -> ReplyKeyboardMarkup:
    rows = [
        [KeyboardButton("üì¶ –ú–∞—Å—Å–æ–≤–∞—è"), KeyboardButton("‚úâÔ∏è –†—É—á–Ω–∞—è")],
        [KeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫"), KeyboardButton("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏—è")],
        [KeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ"), KeyboardButton("üìä –û—Ç—á—ë—Ç—ã")],
        [KeyboardButton("‚õî –°—Ç–æ–ø")],
    ]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)


async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°—Ç–∞—Ä—Ç: –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è –Ω–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å."""

    message = update.message
    if message is None:
        return

    await message.reply_text("–ú–µ–Ω—é", reply_markup=_bottom_reply_keyboard())
    await message.reply_text(
        _normalize_html(_load_start_text()),
        reply_markup=_categories_inline_keyboard(),
        parse_mode=ParseMode.HTML,
    )


async def on_bulk_inline(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    if query is None:
        return
    await query.answer()
    await query.message.reply_text(
        _normalize_html(_load_bulk_text()),
        reply_markup=_bottom_reply_keyboard(),
        parse_mode=ParseMode.HTML,
    )


async def on_document(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message = update.message
    if message and message.document:
        await message.reply_text("–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ.")


async def on_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    if query is None:
        return
    await query.answer()


async def on_bulk_reply(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message = update.message
    if message is None:
        return
    await message.reply_text(
        _normalize_html(_load_bulk_text()),
        reply_markup=_bottom_reply_keyboard(),
        parse_mode=ParseMode.HTML,
    )


async def on_stop(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message = update.message
    if message is None:
        return
    await message.reply_text(
        "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞.", reply_markup=ReplyKeyboardRemove()
    )


async def on_show_exclusions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message = update.message
    if message is None:
        return
    await message.reply_text(
        "–ò—Å–∫–ª—é—á–µ–Ω–∏—è –ø–æ–∫–∞ –ø—É—Å—Ç—ã.", reply_markup=_bottom_reply_keyboard()
    )


async def on_manual(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message = update.message
    if message is None:
        return
    await message.reply_text(
        "–†—É—á–Ω–æ–π —Ä–µ–∂–∏–º —Å–∫–æ—Ä–æ –≤–µ—Ä–Ω—ë–º (–∑–∞–≥–ª—É—à–∫–∞).",
        reply_markup=_bottom_reply_keyboard(),
    )


async def on_clear(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message = update.message
    if message is None:
        return
    await message.reply_text(
        "–°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω (–∑–∞–≥–ª—É—à–∫–∞).", reply_markup=_bottom_reply_keyboard()
    )


async def on_about(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message = update.message
    if message is None:
        return
    await message.reply_text(
        "–û –±–æ—Ç–µ: PTB-–≤–µ—Ä—Å–∏—è –±–µ–∑ aiogram.", reply_markup=_bottom_reply_keyboard()
    )


async def on_reports(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message = update.message
    if message is None:
        return
    await message.reply_text(
        "–û—Ç—á—ë—Ç—ã –±—É–¥—É—Ç –∑–¥–µ—Å—å (–∑–∞–≥–ª—É—à–∫–∞).",
        reply_markup=_bottom_reply_keyboard(),
    )


def main_sync() -> None:
    """
    –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—É—Å–∫ PTB v20+: –±–µ–∑ –ø—Ä—è–º–æ–π —Ä–∞–±–æ—Ç—ã —Å Updater.
    –ü—Ä–æ—Å—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—ç–Ω–¥–ª–µ—Ä—ã –∏ –≤—ã–∑—ã–≤–∞–µ–º run_polling().
    """

    _load_env()
    token = os.getenv("TELEGRAM_BOT_TOKEN") or ""
    if not token:
        raise SystemExit("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")

    app = Application.builder().token(token).build()
    app.add_handler(CommandHandler(["start", "help"], cmd_start))

    app.add_handler(CallbackQueryHandler(on_bulk_inline, pattern=r"^bulk:start$"))
    app.add_handler(CallbackQueryHandler(on_category, pattern=r"^cat:(bio|geo|psy|sport|tour)$"))

    app.add_handler(
        MessageHandler(filters.TEXT & filters.Regex(r"^üì¶ –ú–∞—Å—Å–æ–≤–∞—è$"), on_bulk_reply)
    )
    app.add_handler(
        MessageHandler(filters.TEXT & filters.Regex(r"^‚õî –°—Ç–æ–ø$"), on_stop)
    )
    app.add_handler(
        MessageHandler(
            filters.TEXT & filters.Regex(r"^üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏—è$"),
            on_show_exclusions,
        )
    )
    app.add_handler(
        MessageHandler(filters.TEXT & filters.Regex(r"^‚úâÔ∏è –†—É—á–Ω–∞—è$"), on_manual)
    )
    app.add_handler(
        MessageHandler(
            filters.TEXT & filters.Regex(r"^üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫$"), on_clear
        )
    )
    app.add_handler(
        MessageHandler(filters.TEXT & filters.Regex(r"^‚ÑπÔ∏è –û –±–æ—Ç–µ$"), on_about)
    )
    app.add_handler(
        MessageHandler(filters.TEXT & filters.Regex(r"^üìä –û—Ç—á—ë—Ç—ã$"), on_reports)
    )

    app.add_handler(MessageHandler(filters.Document.ALL, on_document))

    # run_polling ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π, —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π/–æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
    # close_loop=False ‚Äî —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å —á—É–∂–æ–π event loop –Ω–∞ Windows
    app.run_polling(close_loop=False)


if __name__ == "__main__":
    main_sync()
